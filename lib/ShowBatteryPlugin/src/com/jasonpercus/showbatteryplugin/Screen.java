/*
 * Copyright (C) JasonPercus Systems, Inc - All Rights Reserved
 *
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 *
 * Written by JasonPercus, January 2021
 */
package com.jasonpercus.showbatteryplugin;



/**
 * Cette classe représente les fenêtres qui affichent le status de la batterie
 * @author JasonPercus
 * @version 1.0
 */
public class Screen extends javax.swing.JDialog {
    
    
    
//ATTRIBUTS
    /**
     * Correspond au nom de l'application
     */
    private final String nameApp;
    
    /**
     * Correspond à la version de l'application
     */
    private final String versionApp;
    
    /**
     * Correspond à l'icône de l'application
     */
    private final java.awt.Image icon;

    
    
//CONSTRUCTOR
    /**
     * Crée une fenêtre qui affichera le status actuel de la batterie
     * @param full Détermine si la batterie est pleine ou pas
     * @param nameApp Correspond au nom de l'application
     * @param versionApp Correspond à la version de l'application
     * @param icon Correspond à l'icône de l'application
     */
    public Screen(boolean full, String nameApp, String versionApp, java.awt.Image icon) {
        super(new javax.swing.JFrame(), true);
        this.nameApp    = nameApp;
        this.versionApp = versionApp;
        this.icon       = icon;
        initComponents();
        setAlwaysOnTop(true);
        if(full)
            battery.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/jasonpercus/showbatteryplugin/assets/full.png")));
        else
            battery.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/jasonpercus/showbatteryplugin/assets/empty.png")));
    }

    
    
//METHODE PRIVATE
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        pane = new javax.swing.JPanel();
        battery = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(String.format("%s (%s)", this.nameApp, this.versionApp));
        setMinimumSize(new java.awt.Dimension(200, 200));
        setUndecorated(true);
        setResizable(false);

        pane.setBackground(new java.awt.Color(102, 102, 102));
        pane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        pane.setForeground(new java.awt.Color(102, 102, 102));
        pane.setLayout(new java.awt.BorderLayout());

        battery.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pane.add(battery, java.awt.BorderLayout.CENTER);

        getContentPane().add(pane, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel battery;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel pane;
    // End of variables declaration//GEN-END:variables



}